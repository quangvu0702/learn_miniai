# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/05_hugging_face_dataset.ipynb.

# %% auto 0
__all__ = ['inplace', 'show_image', 'show_images', 'transforms', 'collate_dict', 'DataLoaders']

# %% ../nbs/05_hugging_face_dataset.ipynb 25
import torchvision.transforms.functional as TF

# %% ../nbs/05_hugging_face_dataset.ipynb 41
def inplace(f):
    def _f(b):
        f(b)
        return b
    return _f

# %% ../nbs/05_hugging_face_dataset.ipynb 44
from operator import itemgetter

# %% ../nbs/05_hugging_face_dataset.ipynb 55
import matplotlib.pyplot as plt
plt.rcParams["figure.figsize"] = (5, 5)

# %% ../nbs/05_hugging_face_dataset.ipynb 60
def show_image(img, ax, title=None, fontsize=11):
    ax.imshow(img, cmap='gray')
    if title is not None: ax.set_title(title, fontsize=fontsize)
    ax.axis('off')

# %% ../nbs/05_hugging_face_dataset.ipynb 67
def show_images(imgs, titles=None, n_rows=3, n_cols=3):
    if titles is None: titles = [None] * len(imgs)
    fig, axs = plt.subplots(n_rows, n_cols)
    fig.set_size_inches(n_rows * 2, n_cols * 2)

    for (img, title), ax in zip(zip(imgs, titles), axs.flat):
        if len(img.shape) == 3 and img.shape[0] == 1:
            img = img[0]
        show_image(img, ax, title=title)

    fig.subplots_adjust(hspace=0.5, wspace=0.5)
    plt.show()

# %% ../nbs/05_hugging_face_dataset.ipynb 69
from torch.utils.data import default_collate
from .training import get_dls

@inplace
def transforms(x): x['image'] = [TF.to_tensor(o) for o in x['image']]

def collate_dict(ds):
    get = itemgetter(*ds.features)
    def _f(b):
        return get(default_collate(b))
    return _f

class DataLoaders():
    def __init__(self, *args, **kwargs):
        self.train, self.val = args[0:2]
        
    @classmethod
    def from_dd(cls, dd, bs, **kwargs):
        f = collate_dict(dd['train'])
        return cls(*get_dls(*dd.values(), bs, collate_fn=f, **kwargs))
